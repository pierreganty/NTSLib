nts __Dualyzer_mergesort;
validity__dim_,dim : int; 
main{

mid_2_base,mid_2_size,mid_1_base,mid_1_size,__nts__naffected_ret_val_,validity____nts__naffected_ret_val__,validity__A_,validity____retres_,__ndet_cond__,__if_ndet_cond__ : int, real_typed_ndet_arg_3 :real, _ndet_arg_3 : int, real_typed_ndet_arg_2 :real, _ndet_arg_2 : int, real_typed_ndet_arg_1 :real, _ndet_arg_1 : int, real_typed_ndet_arg_0 :real, _ndet_arg_0,__retres: int  ;

 out ret_val_, validity__ret_val__  : int;
initial sinit ;
final s15;
error s11,s13; sinit->s0 { mid_1_size'=10*4 and mid_2_size'=10*4 } 
 s0->s1 { havoc() } 
 s1->s2 { havoc() } 
 s2->s3 { havoc() } 
 s3->s4 { havoc() } 
 s4->s5 { havoc() } 
 s5->s6 { havoc() } 
 s6->s7 { havoc() } 
 s7->s8 { havoc() } 
 s8->s9 { havoc() } 
 s9->s10 { havoc() } 
 s10->sinter0 { havoc() } 
 sinter0->s12 { msort(_ndet_arg_0,1,0,1,dim-1,-1) and havoc() } 
 s12->s14 { __retres'=0 and havoc(__retres) } 
 s14->s15 { ret_val_'=__retres and havoc(ret_val_) }
}
error_{

__nts__naffected_ret_val_,validity____nts__naffected_ret_val__,__ndet_cond__,__if_ndet_cond__ : int, real_typed_ndet_arg_0 :real, _ndet_arg_0: int  ;
initial sinit ;

error s1; sinit->s0 {  } 
 s0->s1 { havoc() }
}
merge{
in offset__a_,validity__a_,i,validity__i_,iu,validity__iu_,ju,validity__ju_: int;

__nts__naffected_ret_val_,validity____nts__naffected_ret_val__,validity____lengthoft_,validity__j_,validity__m_,validity__t_,__ndet_cond__,__if_ndet_cond__ : int, real_typed_ndet_arg_7 :real, _ndet_arg_7 : int, real_typed_ndet_arg_6 :real, _ndet_arg_6 : int, real_typed_ndet_arg_5 :real, _ndet_arg_5 : int, real_typed_ndet_arg_4 :real, _ndet_arg_4 : int, real_typed_ndet_arg_3 :real, _ndet_arg_3 : int, real_typed_ndet_arg_2 :real, _ndet_arg_2 : int, real_typed_ndet_arg_1 :real, _ndet_arg_1 : int, real_typed_ndet_arg_0 :real, _ndet_arg_0,__lengthoft,offset__t_,m,j: int  ;
initial sinit ;
final s18;
error s1,s3,s6,s9,s10,s12,s14,s16; sinit->s0 {  } 
 s0->s2 { j'=iu+1 and havoc(j) } 
 s2->s4 { m'=ju-i+1 and havoc(m) } 
 s4->s5 { havoc() } 
 s5->sinter0 { m <=  0 and havoc() } 
 sinter0->s7 { error_() and havoc() } 
 s5->sinter1 { m <=  0 and havoc() } 
 sinter1->s7 { error_() and havoc() } 
 s5->s8 { m > 0 and havoc() } 
 s7->s8 { havoc() } 
 s8->s11 { __lengthoft'=m and havoc(__lengthoft) } 
 s11->sinter2 { havoc() } 
 sinter2->s13 { (validity__t_',offset__t_')=__builtin_alloca(4*__lengthoft,-1) and havoc(validity__t_,offset__t_) } 
 s13->sinter3 { havoc() } 
 sinter3->s15 { mergeF2(offset__a_,-1,offset__t_,0,i,-1,iu,-1,j,-1,ju,-1,0,1) and havoc() } 
 s15->sinter4 { havoc() } 
 sinter4->s17 { copyseq(offset__t_,0,offset__a_,-1,0,1,m-1,-1,i,-1) and havoc() } 
 s17->s18 { havoc() }
}
mergeF2{
in offset__a_,validity__a_,offset__t_,validity__t_,i,validity__i_,iu,validity__iu_,j,validity__j_,ju,validity__ju_,k,validity__k_: int;

__nts__naffected_ret_val_,validity____nts__naffected_ret_val__,__ndet_cond__,__if_ndet_cond__ : int, real_typed_ndet_arg_7 :real, _ndet_arg_7 : int, real_typed_ndet_arg_6 :real, _ndet_arg_6 : int, real_typed_ndet_arg_5 :real, _ndet_arg_5 : int, real_typed_ndet_arg_4 :real, _ndet_arg_4 : int, real_typed_ndet_arg_3 :real, _ndet_arg_3 : int, real_typed_ndet_arg_2 :real, _ndet_arg_2 : int, real_typed_ndet_arg_1 :real, _ndet_arg_1 : int, real_typed_ndet_arg_0 :real, _ndet_arg_0: int  ;
initial sinit ;
final s6;
error s2,s5,s7,s10,s12,s14,s16,s18,s19,s22,s24,s26,s28,s29,s32,s34,s36,s38,s40,s42,s44,s46,s48,s50,s51,s54,s56,s57,s60,s62,s64,s66,s68,s70,s71,s73,s75,s77; sinit->s0 {  } 
 s0->s1 { havoc() } 
 s1->sinter0 { i > iu and havoc() } 
 sinter0->s3 { copyseq(offset__a_,-1,offset__t_,-1,j,-1,ju,-1,k,-1) and havoc() } 
 s1->sinter1 { i > iu and havoc() } 
 sinter1->s3 { copyseq(offset__a_,-1,offset__t_,-1,j,-1,ju,-1,k,-1) and havoc() } 
 s1->s4 { i <=  iu and havoc() } 
 s3->s6 { havoc() } 
 s4->sinter2 { j > ju and havoc() } 
 sinter2->s8 { copyseq(offset__a_,-1,offset__t_,-1,i,-1,iu,-1,k,-1) and havoc() } 
 s4->sinter3 { j > ju and havoc() } 
 sinter3->s8 { copyseq(offset__a_,-1,offset__t_,-1,i,-1,iu,-1,k,-1) and havoc() } 
 s4->s9 { j <=  ju and havoc() } 
 s8->s6 { havoc() } 
 s9->s11 { i < 0 and havoc() } 
 s9->s13 { i >= 0 and havoc() } 
 s11->s15 { havoc() } 
 s13->s15 { i >= dim and havoc() } 
 s13->s17 { i < dim and havoc() } 
 s15->sinter4 { havoc() } 
 sinter4->s20 { error_() and havoc() } 
 s17->s21 { j < 0 and havoc() } 
 s17->s23 { j >= 0 and havoc() } 
 s20->s17 { havoc() } 
 s21->s25 { havoc() } 
 s23->s25 { j >= dim and havoc() } 
 s23->s27 { j < dim and havoc() } 
 s25->sinter5 { havoc() } 
 sinter5->s30 { error_() and havoc() } 
 s27->s31 { __if_ndet_cond__ = 0 and havoc(__if_ndet_cond__) } 
 s27->s31 { __if_ndet_cond__ = 0 and havoc(__if_ndet_cond__) } 
 s27->s33 { __if_ndet_cond__ != 0 and havoc(__if_ndet_cond__) } 
 s27->s33 { __if_ndet_cond__ != 0 and havoc(__if_ndet_cond__) } 
 s30->s27 { havoc() } 
 s31->s35 { k < 0 and havoc() } 
 s31->s37 { k >= 0 and havoc() } 
 s33->s39 { k < 0 and havoc() } 
 s33->s41 { k >= 0 and havoc() } 
 s35->s43 { havoc() } 
 s37->s43 { k >= dim and havoc() } 
 s37->s45 { k < dim and havoc() } 
 s39->s47 { havoc() } 
 s41->s47 { k >= dim and havoc() } 
 s41->s49 { k < dim and havoc() } 
 s43->sinter6 { havoc() } 
 sinter6->s52 { error_() and havoc() } 
 s45->s53 { i < 0 and havoc() } 
 s45->s55 { i >= 0 and havoc() } 
 s47->sinter7 { havoc() } 
 sinter7->s58 { error_() and havoc() } 
 s49->s59 { j < 0 and havoc() } 
 s49->s61 { j >= 0 and havoc() } 
 s52->s45 { havoc() } 
 s53->s63 { havoc() } 
 s55->s63 { i >= dim and havoc() } 
 s55->s65 { i < dim and havoc() } 
 s58->s49 { havoc() } 
 s59->s67 { havoc() } 
 s61->s67 { j >= dim and havoc() } 
 s61->s69 { j < dim and havoc() } 
 s63->sinter8 { havoc() } 
 sinter8->s72 { error_() and havoc() } 
 s65->sinter9 { havoc() } 
 sinter9->s74 { mergeF2(offset__a_,-1,offset__t_,-1,i+1,-1,iu,-1,j,-1,ju,-1,k+1,-1) and havoc() } 
 s67->sinter10 { havoc() } 
 sinter10->s76 { error_() and havoc() } 
 s69->sinter11 { havoc() } 
 sinter11->s78 { mergeF2(offset__a_,-1,offset__t_,-1,i,-1,iu,-1,j+1,-1,ju,-1,k+1,-1) and havoc() } 
 s72->s65 { havoc() } 
 s74->s6 { havoc() } 
 s76->s69 { havoc() } 
 s78->s6 { havoc() }
}
msort{
in offset__a_,validity__a_,i,validity__i_,j,validity__j_: int;

__nts__naffected_ret_val_,validity____nts__naffected_ret_val__,validity__m_,__ndet_cond__,__if_ndet_cond__ : int, real_typed_ndet_arg_4 :real, _ndet_arg_4 : int, real_typed_ndet_arg_3 :real, _ndet_arg_3 : int, real_typed_ndet_arg_2 :real, _ndet_arg_2 : int, real_typed_ndet_arg_1 :real, _ndet_arg_1 : int, real_typed_ndet_arg_0 :real, _ndet_arg_0,m: int  ;
initial sinit ;
final s6;
error s3,s4,s7,s9,s11; sinit->s0 {  } 
 s0->s1 { havoc() } 
 s1->s2 { i >= j and havoc() } 
 s1->s5 { m'=i+j-2 and i < j and havoc(m) } 
 s2->s6 { havoc() } 
 s5->sinter0 { havoc() } 
 sinter0->s8 { msort(offset__a_,-1,i,-1,m,-1) and havoc() } 
 s8->sinter1 { havoc() } 
 sinter1->s10 { msort(offset__a_,-1,m+1,-1,j,-1) and havoc() } 
 s10->sinter2 { havoc() } 
 sinter2->s12 { merge(offset__a_,-1,i,-1,m,-1,j,-1) and havoc() } 
 s12->s6 { havoc() }
}
copyseq{
in offset__a_,validity__a_,offset__t_,validity__t_,i,validity__i_,j,validity__j_,k,validity__k_: int;

__nts__naffected_ret_val_,validity____nts__naffected_ret_val__,__ndet_cond__,__if_ndet_cond__ : int, real_typed_ndet_arg_5 :real, _ndet_arg_5 : int, real_typed_ndet_arg_4 :real, _ndet_arg_4 : int, real_typed_ndet_arg_3 :real, _ndet_arg_3 : int, real_typed_ndet_arg_2 :real, _ndet_arg_2 : int, real_typed_ndet_arg_1 :real, _ndet_arg_1 : int, real_typed_ndet_arg_0 :real, _ndet_arg_0: int  ;
initial sinit ;
final s6;
error s3,s5,s8,s10,s12,s14,s15,s18,s20,s22,s24,s25,s27; sinit->s0 {  } 
 s0->s1 { havoc() } 
 s1->s2 { i > j and havoc() } 
 s1->s4 { i <=  j and havoc() } 
 s2->s6 { havoc() } 
 s4->s7 { k < 0 and havoc() } 
 s4->s9 { k >= 0 and havoc() } 
 s7->s11 { havoc() } 
 s9->s11 { k >= dim and havoc() } 
 s9->s13 { k < dim and havoc() } 
 s11->sinter0 { havoc() } 
 sinter0->s16 { error_() and havoc() } 
 s13->s17 { i < 0 and havoc() } 
 s13->s19 { i >= 0 and havoc() } 
 s16->s13 { havoc() } 
 s17->s21 { havoc() } 
 s19->s21 { i >= dim and havoc() } 
 s19->s23 { i < dim and havoc() } 
 s21->sinter1 { havoc() } 
 sinter1->s26 { error_() and havoc() } 
 s23->sinter2 { havoc() } 
 sinter2->s28 { copyseq(offset__a_,-1,offset__t_,-1,i+1,-1,j,-1,k+1,-1) and havoc() } 
 s26->s23 { havoc() } 
 s28->s6 { havoc() }
}
__assert_fail{
in a,b,c,d,e,f,g,h : int;
initial sinit ;
error s0;
sinit->s0 { true and havoc() }
}

NonDetInt{
out ndet, validity_ndet_: int;
initial sinit;
final s1;

sinit->s0{ havoc(ndet,  validity_ndet_)}
s0->s1{havoc()}

}

__VERIFIER_nondet_int{
out ndet, validity_ndet_: int;
initial sinit;
final s1;

sinit->s0{ havoc(ndet,  validity_ndet_)}
s0->s1{havoc()}

}

__NdetValInRange {
 out ndval, ndvalid : int;
 in lowerb, lbval, upperb, upbval : int;
 initial sinit;
 final s1;

 sinit->s1 { ndval' <= upperb and ndval' >= lowerb and ndvalid'=1 and havoc(ndval, ndvalid) }

}

strlen{
 out len, valid_len : int;
 in ptr_off, ptr_valid : int;

 initial sinit;
 final s1;
 sinit->s0 {valid_len'=ptr_valid and havoc(valid_len,len)}
 s0->s1 { havoc()}
}

memcpy{
 in dest_off, dest_val, src_off, srv_val, sizein, size_val : int;
 out ret_addr, valid_ret : int;
 initial sinit;
 final s1;

 sinit -> s0 {ret_addr'=dest_off and valid_ret'=dest_val and havoc(ret_addr,valid_ret)}
 s0->s1 {havoc()}
}

strstr{
 in a,b,c,d : int;
 out off, val : int;

 initial  sinit;
 final  sfinal;

 sinit->sfinal {val' = b and havoc(off,val) }
}

printf{
 in a,b,c,d : int;
 out off, val : int;

 initial  sinit;
 final  sfinal;

 sinit->sfinal { havoc(off,val) }

}


abs{
 in x, val : int ;
 out y, val_y : int ;

  initial sinit ;
 final  sfinal ;

 sinit->sfinal { x>= 0 and y'=x and val_y' = val and havoc(y,val_y)}
 sinit->sfinal { x < 0 and y'=-x and val_y' = val and havoc(y,val_y)}
 
 


}

fabs{
 in x : real, val : int;
 out res : real, val_out : int ;
 initial sinit ;
 final  sfinal ;

 sinit->sfinal { x >= 0.0 and res'= x and val_out'=val and havoc(res,val_out)}
 sinit->sfinal { x< 0.0 and res'= -x and val_out'=val and havoc(res,val_out)}

}

__builtin_alloca{
 in x, val_x : int;
 out y, vx : int ;

 initial sinit ;
 final  sfinal ;
 
 sinit->sfinal { y'=x and vx'= val_x and havoc(y,vx) }

}
